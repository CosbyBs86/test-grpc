// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: items.proto

package grpcimplementation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcServiceClient is the client API for GrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcServiceClient interface {
	//Append items command
	AppendItems(ctx context.Context, opts ...grpc.CallOption) (GrpcService_AppendItemsClient, error)
}

type grpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcServiceClient(cc grpc.ClientConnInterface) GrpcServiceClient {
	return &grpcServiceClient{cc}
}

func (c *grpcServiceClient) AppendItems(ctx context.Context, opts ...grpc.CallOption) (GrpcService_AppendItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[0], "/NodeGrpc.GrpcService/AppendItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceAppendItemsClient{stream}
	return x, nil
}

type GrpcService_AppendItemsClient interface {
	Send(*AppendItemsRequest) error
	CloseAndRecv() (*EtsBaseResponse, error)
	grpc.ClientStream
}

type grpcServiceAppendItemsClient struct {
	grpc.ClientStream
}

func (x *grpcServiceAppendItemsClient) Send(m *AppendItemsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcServiceAppendItemsClient) CloseAndRecv() (*EtsBaseResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EtsBaseResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcServiceServer is the server API for GrpcService service.
// All implementations must embed UnimplementedGrpcServiceServer
// for forward compatibility
type GrpcServiceServer interface {
	//Append items command
	AppendItems(GrpcService_AppendItemsServer) error
	mustEmbedUnimplementedGrpcServiceServer()
}

// UnimplementedGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServiceServer struct {
}

func (UnimplementedGrpcServiceServer) AppendItems(GrpcService_AppendItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method AppendItems not implemented")
}
func (UnimplementedGrpcServiceServer) mustEmbedUnimplementedGrpcServiceServer() {}

// UnsafeGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServiceServer will
// result in compilation errors.
type UnsafeGrpcServiceServer interface {
	mustEmbedUnimplementedGrpcServiceServer()
}

func RegisterGrpcServiceServer(s grpc.ServiceRegistrar, srv GrpcServiceServer) {
	s.RegisterService(&GrpcService_ServiceDesc, srv)
}

func _GrpcService_AppendItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcServiceServer).AppendItems(&grpcServiceAppendItemsServer{stream})
}

type GrpcService_AppendItemsServer interface {
	SendAndClose(*EtsBaseResponse) error
	Recv() (*AppendItemsRequest, error)
	grpc.ServerStream
}

type grpcServiceAppendItemsServer struct {
	grpc.ServerStream
}

func (x *grpcServiceAppendItemsServer) SendAndClose(m *EtsBaseResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcServiceAppendItemsServer) Recv() (*AppendItemsRequest, error) {
	m := new(AppendItemsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcService_ServiceDesc is the grpc.ServiceDesc for GrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NodeGrpc.GrpcService",
	HandlerType: (*GrpcServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AppendItems",
			Handler:       _GrpcService_AppendItems_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "items.proto",
}
